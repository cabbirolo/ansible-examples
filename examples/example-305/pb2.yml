- name: Test plugins/filter/replace_keys.py (tests/integration/targets/filter_replace_keys)
  hosts: localhost

  vars_files:
    filter_replace_keys/vars/main.yml

  tasks:

    - name: Debug ansible_version
      ansible.builtin.debug:
        var: ansible_version
      when: not quite_test | d(true) | bool
      tags: ansible_version

    - name: Test replace keys equal (default)
      ansible.builtin.assert:
        that:
          - (rr | difference(result1) | length) == 0
        success_msg: |
          [OK]  result:
          {{ rr | to_yaml }}
        fail_msg: |
          [ERR] result:
          {{ rr | to_yaml }}
        quiet: "{{ quiet_test | d(true) | bool }}"
      vars:
        rr: "{{ list1 | my_replace_keys(target=tt) }}"
        tt:
          - {before: k0_x0, after: a0}
          - {before: k1_x1, after: a1}
      tags: equal_default

    - name: Test replace keys targets1
      ansible.builtin.assert:
        that:
          - (rr | difference(result1) | length) == 0
        success_msg: |
          [OK]  result:
          {{ rr | to_yaml }}
        fail_msg: |
          [ERR] result:
          {{ rr | to_yaml }}
        quiet: "{{ quiet_test | d(true) | bool }}"
      loop: "{{ targets1 | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      vars:
        rr: "{{ list1 | my_replace_keys(target=item.value, matching_parameter=item.key) }}"
      tags: targets1

    - name: Test replace keys targetsX
      include_tasks:
        file: fn-test-replace_keys.yml
        apply:
          tags: targetsX
      loop: "{{ targets2 }}"
      loop_control:
        label: "{{ item.label }}"
      tags: targetsX
